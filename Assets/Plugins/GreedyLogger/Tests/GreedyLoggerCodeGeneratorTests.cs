using GreedyLogger.Settings;
using NUnit.Framework;
using System.Reflection;
using UnityEngine;
using System.Collections.Generic;
using GreedyLogger.Editor;

namespace GreedyLogger.Tests
{
    public class GreedyLoggerCodeGeneratorTests
    {
        [Test]
        public void GenerateLoggerCode_ContainsHeaderNamespaceAndMethodSignatures()
        {
            LoggingSettings settings = CreateTestSettings();
            MethodInfo method = typeof(GreedyLoggerCodeGenerator).GetMethod("GenerateLoggerCode", BindingFlags.NonPublic | BindingFlags.Static);
            Assert.NotNull(method, "Method GenerateLoggerCode not found!.");
            string result = method.Invoke(null, new object[] { settings }) as string;
            Assert.IsNotNull(result);

            StringAssert.Contains("// <auto-generated>", result);
            StringAssert.Contains("namespace GreedyLogger", result);
            StringAssert.Contains("public static partial class GLogger", result);

            foreach (var level in settings.LogLevels)
            {
                string expectedMethodName = level.Name == "Default" ? "Log(" : "Log" + level.Name + "(";
                StringAssert.Contains(expectedMethodName, result, $"Method for logging level '{level.Name}' not found!");
            }
        }

        [Test]
        public void GenerateLogImportanceEnum_ContainsCorrectEnumEntries()
        {
            LoggingSettings settings = CreateTestSettings();
            MethodInfo method = typeof(GreedyLoggerCodeGenerator).GetMethod("GenerateLogImportanceEnum", BindingFlags.NonPublic | BindingFlags.Static);
            Assert.NotNull(method, "Method GenerateLogImportanceEnum not found!");
            string result = method.Invoke(null, new object[] { settings }) as string;
            Assert.IsNotNull(result);

            StringAssert.Contains("// <auto-generated>", result);
            StringAssert.Contains("public enum LogImportance", result);

            for (int i = 0; i < settings.LogLevels.Count; i++)
            {
                string expectedLine = $"{settings.LogLevels[i].Name} = {i},";
                StringAssert.Contains(expectedLine, result, $"Enum value '{settings.LogLevels[i].Name}' not found!");
            }
        }

        [Test]
        public void GenerateLogContextEnum_ContainsFlagAttributesAndCorrectEntries()
        {
            LoggingSettings settings = CreateTestSettings();
            FieldInfo contextsField = typeof(LoggingSettings).GetField("_contexts", BindingFlags.NonPublic | BindingFlags.Instance);
            contextsField.SetValue(settings, new List<string> { "Meta", "Network", "Gameplay" });

            MethodInfo method = typeof(GreedyLoggerCodeGenerator).GetMethod("GenerateLogContextEnum", BindingFlags.NonPublic | BindingFlags.Static);
            Assert.NotNull(method, "Method GenerateLogContextEnum not found!");
            string result = method.Invoke(null, new object[] { settings }) as string;
            Assert.IsNotNull(result);

            StringAssert.Contains("// <auto-generated>", result);
            StringAssert.Contains("[System.Flags]", result);
            StringAssert.Contains("public enum LogContext", result);
            StringAssert.Contains("None = 1 << 0,", result);
            StringAssert.Contains("Meta = 1 << 1,", result);
            StringAssert.Contains("Network = 1 << 2,", result);
            StringAssert.Contains("Gameplay = 1 << 3,", result);
        }

        private LoggingSettings CreateTestSettings() => ScriptableObject.CreateInstance<LoggingSettings>();
    }
}
